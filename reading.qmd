---
title: Reading List
---

**01/31/24**

* The reference paper for constructing SSA is [Efficiently Computing Static Single Assignment Form and the Control Dependence Graph](https://dl.acm.org/doi/10.1145/115372.115320) by Cytron et al.
* The reference paper for dominance frontiers is [A Simple, Fast Dominance Algorithm](http://www.hipersoft.rice.edu/grads/publications/dom14.pdf) by Cooper et al.

**02/01/24**

* The reference thesis for llvm is [LLVM: An Infrastructure for Multi-stage Optimization](https://llvm.org/pubs/2002-12-LattnerMSThesis.pdf) by Chris Lattner.
* The reference paper for functional equivalence of SSA is [SSA is Functional Programming](https://www.cs.princeton.edu/~appel/papers/ssafun.pdf) by Andrew Appel.

**02/12/24**

* The reference material for PRE is this [handout](https://gustavus.edu/academics/departments/mathematics-computer-science-and-statistics/max/courses/S2005/MCS-388/pre.pdf).
* The reference paper for PRE is [A Variation of Knoop, Ruthing, and Steffen's Lazy Code Motion](https://www.cs.utexas.edu/users/pingali/CS380C/2007fa/papers/lcm.pdf)


## Paper Discussions

### Compilation for Sparse Tensor Algebra

* The Tensor Algebra Compiler [paper](tensor-compiler.org/files/kjolstad-oopsla17-tensor-compiler.pdf) by Kjolstad et al.
* Format Abstraction for Sparse Tensor Algebra Compilers [paper](https://tensor-compiler.org/files/chou-oopsla18-taco-formats.pdf) by Chou et al.
* Autoscheduling for Sparse Tensor Algebra with an Asymptotic Cost Model [paper](https://tensor-compiler.org/files/ahrens-pldi22-taco-autoscheduling.pdf) by Ahrens et al.
* Unified Compilation for Lossless Compression and Sparse Computing [paper](https://tensor-compiler.org/files/donenfeld-cgo22-taco-compression.pdf) by Donenfeld et al.

### Vectorization

* VeGen: A Vectorizer Generator for SIMD and Beyond [paper](https://groups.csail.mit.edu/commit/papers/2021/vegen.pdf) by Chen et al.
* All you need is superword-level parallelism: systematic control-flow vectorization with SLP [paper](https://dl.acm.org/doi/abs/10.1145/3519939.3523701) by Chen et al.
* Whole-Function Vectorization [paper](https://compilers.cs.uni-saarland.de/papers/karrenberg_wfv.pdf) by Karrenberg et al.

