[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CS6304: Advanced Topics in Language and Translation (Spring 2024)",
    "section": "",
    "text": "Instructor: Kirshanthan (Krish) Sundararajah | email | website\n\nClass Time: MW 2.30 pm - 3.45 pm at WHIT 349\nPiazza: link\nOffice Hours: By Appointment (4103 Gilbert Place)"
  },
  {
    "objectID": "index.html#course-topics",
    "href": "index.html#course-topics",
    "title": "CS6304: Advanced Topics in Language and Translation (Spring 2024)",
    "section": "Course Topics",
    "text": "Course Topics\nThis course focuses on the techniques used by advanced compilers to optimize and analyze programs. The topics we will cover in this course include:\n\nStatic Single Assignment (SSA) Form.\nAdvanced Dataflow Analysis.\nLoop Transformations (cache models and automatic transformation frameworks)\nData Layout Transformations.\nAutomatic Verification in Compilers.\nOther Topics (Performance, Parallelization, Metaprogramming etc.)"
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "CS6304: Advanced Topics in Language and Translation (Spring 2024)",
    "section": "Course Overview",
    "text": "Course Overview\nThis course can be divided into two parts.\n\nFirst half: Lectures on the first three topics.\nSecond half: Discussing classic and current research papers on exciting topics of compiler research.\n\n\nWriting a Critical Response\nEach student must choose three papers for which to write a 1-page response. A format will be provided for this response. This response must summarize the main ideas of the paper and discuss any shortcomings and possible extensions of the paper (A list of papers will be made available soon).\n\n\nDelivering a Research Presentation\nEach student will also choose an additional paper to present in the class. The week before your presentation, you should meet with me to review and revise your slides, and to give a practice presentation. If you have not given a research presentation before, this course will serve as training! Each presentation should be 35 minutes, followed by a 15-minute discussion period (appropriate presentation length will factor in to your grade).\n\n\nCarrying Out a Research Project\nThe bulk of your grade will come from an individual course project. This project can be on any topic you like (including related to your own research), as long as it is connected to the material in the course. I will also provide some ideas if you have trouble coming up with one. You will write a two-page proposal detailing your project idea, and then present the results of your project during one of the last class periods. Your project presentation should be 25 minutes, including questions. The exact dates for when your proposal and presentation will be due are yet to be determined.\n\n\nWriting a Research Paper\nYou will also submit a final project report, written in the style of a research paper. This should be roughly 8-10 pages, two-column, 10-pt font. Your report should discuss the motivation for your project, survey related work, describe your idea and implementation and provide experimental validation (or theoretical justification, in the case of a theory-oriented project).\n\n\nGrade Calculation\n\nPaper responses: 15% (= 3 x 5%)\nPaper presentation: 25%\nProject: 50%\n\nProposal: 10%\nPresentation: 15%\nReport: 25%"
  },
  {
    "objectID": "reading.html",
    "href": "reading.html",
    "title": "Reading List",
    "section": "",
    "text": "01/31/24\n02/01/24\n02/12/24"
  },
  {
    "objectID": "reading.html#paper-discussions",
    "href": "reading.html#paper-discussions",
    "title": "Reading List",
    "section": "Paper Discussions",
    "text": "Paper Discussions\n\nCompilation for Sparse Tensor Algebra\n\nThe Tensor Algebra Compiler paper by Kjolstad et al.\nFormat Abstraction for Sparse Tensor Algebra Compilers paper by Chou et al.\nAutoscheduling for Sparse Tensor Algebra with an Asymptotic Cost Model paper by Ahrens et al.\nUnified Compilation for Lossless Compression and Sparse Computing paper by Donenfeld et al.\n\n\n\nAutomatic Vectorization\n\nVeGen: A Vectorizer Generator for SIMD and Beyond paper by Chen et al.\nAll you need is superword-level parallelism: systematic control-flow vectorization with SLP paper by Chen et al.\nWhole-Function Vectorization paper by Karrenberg et al.\n\n\n\nAutomatic Verification and Fuzzing\n\nTest-Case Reduction for C Compiler Bugs paper by Regehr et al.\nAlive2: Bounded Translation Validation for LLVM paper by Lopes et al.\nRare Path Guided Fuzzing paper by Saha et al.\nTest-Case Reduction and Deduplication Almost for Free with Transformation-Based Compiler Testing paper by Donaldson et al.\n\n\n\nManged Langauges and Runtimes\n\nPerceus: garbage free reference counting with reuse paper by Reinking et al.\nVirtual Machine Showdown: Stack Versus Registers paper by Shi et al.\n\n\n\nData Layout\n\nLate Data Layout: Unifying Data Representation Transformations paper by Ureche et al.\nWhole-Program Optimization of Global Variable Layout paper by McIntosh et al.\nOptimizing Tensor Programs on Flexible Storage paper by Schleich et al."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Class Schedule",
    "section": "",
    "text": "Slides Courtesy: Milind Kulkarni\n\nOverview: Slides\nSSA Translation: Slides\nPartial Redundancy Elimination: Slides\nModeling Loops: Slides\nLoops Transformations: Slides\nSystem of Inequalities: Slides\nDependence Testing: Slides"
  }
]